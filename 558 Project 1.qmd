---
title: "558 Project 1"
author: "Susan H. and Holly P."
format: pdf
editor: visual
---

Load in necessary libraries:

```{r}
#| warning: FALSE
#| message: FALSE
library(tidyverse)
library(readr)


```

Read in data using read_csv():

```{r}
#| warning: FALSE
#| message: FALSE
census_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")


```

## Question 1

Select only Area_name, STCOU, and any column that ends in "D"

```{r}

census_data1 <- census_data |> select(Area_name, STCOU, ends_with("D")) 

#displaying first 5 rows
head(census_data1, 5)

```

## Question 2

converting data into long format, where we want each Area_name entry to have only one Enrollment value with its own unique ID

```{r}
census_long <- census_data1 |> pivot_longer(cols = ends_with("D"), 
                                            names_to = "EnrollmentID",    values_to = "Enrollment_Total")

#displaying first 5 rows
head(census_long,5)
```

## Question 3

```{r}

long_updated <- census_long |> 
  #pull out the year and convert the year into a numeric 
  mutate( Year = as.numeric(substr(EnrollmentID, start = 8, stop = 9))) |> 
   #no dates above 1996
  mutate(Year = Year + 1900) |> 
  #creating new variable for identifying which measurement was grabbed
  mutate(Measurement = substr(EnrollmentID, start = 1, stop = 7) )

#displaying first 5 rows
head(long_updated, 5)

```

## Question 4

```{r}
#County Dataset
row_names <- rownames(long_updated)
#using grep to subset the original data for county
county_subset <- row_names %in% grep(pattern = ", \\w\\w", long_updated$Area_name)
county_tibble <- subset(long_updated, county_subset)
class(county_tibble) <- c("county", class(county_tibble)) #changing class
head(county_tibble, 10)

#State Dataset
state_tibble <- subset(long_updated, !(row_names %in% grep(pattern = ", \\w\\w", 
long_updated$Area_name))) 
# state is what is not included in the grep for county
class(state_tibble) <- c("state", class(state_tibble)) 
#changing class
head(state_tibble, 10)
```

## Question 5

```{r}
#use mutate to create a new variable for state abbreviation 
county_tibble1 <- county_tibble |> mutate(State = substr(county_tibble$Area_name, 
start = nchar(Area_name)-1, stop = nchar(Area_name))) 
#nchar allows for differing name lengths

county_tibble1

```

## Question 6

Use case_when logic to create state tibble

```{r}

state_tibble1 <- state_tibble |> mutate(Division = case_when(
  
  Area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
                   "RHODE ISLAND", "VERMONT") ~ "New England", 
  Area_name %in% c("NEW JERSEY", "NEW YORK", "PENNYSYLVANIA") ~ "Mid-Atlantic", 
  
  Area_name %in% c("ILLINOIS", "INDIANIA", "MICHIGAN", "OHIO", "WISCONSIN") 
  ~ "East North Central", 
  
  Area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", 
                   "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") 
  ~ "West North Central", 
  
  Area_name %in% c("DELAWARE", "DISTRICT OF COLUMBIA", "District of Columbia", 
"FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", 
"SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") 
~ "South Atlantic", 
  
  Area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") 
~ "East South Central", 
  
  Area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") 
~"West South Central", 
  
  Area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "NEVADA", 
                   "MONTANA", "NEW MEXICO", "UTAH", "WYOMING") 
~ "Mountain", 
  
  Area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", 
                   "WASHINGTON") ~ "Pacific", .default = "ERROR"
  
))

state_tibble1
 
```

Read in second data set

```{r}
#| warning: FALSE
#| message: FALSE
census_data2 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

## Write Function for steps 1 and 2

```{r}
step12func <- function(data, values = "Enrollment_Total") {
  
 long_data <- data |> 
   select(Area_name, STCOU, ends_with("D")) |> 
   pivot_longer(cols = ends_with("D"), names_to = "EnrollmentID", values_to = values)

return(long_data) 
}

```

```{r}
step12func(census_data2)
```

## Write Function for step 3

There are now years after 1999 so we have to change our year mutate function

```{r}
step3func <- function(long_data, values = "Enrollment_Total") {
  
  long_updated <- long_data |> 
    mutate(Year = as.numeric(substr(EnrollmentID, start = 8, stop = 9))) |>  
    mutate(Year = ifelse(Year > 25, Year + 1900, Year + 2000)) |> 
    mutate(Measurement = substr(EnrollmentID, start = 1, stop = 7))
  return(long_updated)
}

```

```{r}
step3func(census_long)
```

## Write Function for step 5

```{r}
step5func <- function(tibble) {
county_tibble_result <- tibble |> mutate(State = substr(tibble$Area_name, 
  start = nchar(Area_name)-1, stop = nchar(Area_name)))

return(county_tibble_result)
}
```

```{r}
step5func(county_tibble1)
```

## Write Function for step 6

```{r}
step6func <- function(tibble) {
state_tibble1 <- tibble |> mutate(Division = case_when(
  
  Area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS",
                   "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") 
  ~ "New England", 
  Area_name %in% c("NEW JERSEY", "NEW YORK", "PENNYSYLVANIA")
  ~ "Mid-Atlantic", 
  
  Area_name %in% c("ILLINOIS", "INDIANIA", "MICHIGAN", "OHIO", 
                   "WISCONSIN") ~ "East North Central", 
  
  Area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", 
                   "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") 
  ~ "West North Central", 
  
  Area_name %in% c("DELAWARE", "DISTRICT OF COLUMBIA",
                   "District of Columbia", "FLORIDA", "GEORGIA", 
                   "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") 
  ~ "South Atlantic", 
  
  Area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", 
                   "TENNESSEE") ~ "East South Central", 
  
  Area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") 
  ~"West South Central", 
  
  Area_name %in% c("ARIZONA", "COLORADO", "IDAHO",
                   "NEVADA", "MONTANA", "NEW MEXICO", 
                   "UTAH", "WYOMING") ~ "Mountain", 
  
  Area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII",
                   "OREGON", "WASHINGTON")
  ~ "Pacific", .default = "ERROR"
  
))

return(state_tibble1)
}
```

```{r}
step6func(state_tibble)
```

## Write Function for steps 4,5,6

```{r}
step456func <- function(long_data, values = "Enrollment_Total") {
  
row_names <- rownames(long_data)
county_subset <- row_names %in% grep(pattern = ", \\w\\w", long_data$Area_name)
county_tibble <- subset(long_data, county_subset)
class(county_tibble) <- c("county", class(county_tibble))

state_tibble <- subset(long_data, !(row_names %in% grep(pattern = ", \\w\\w", 
                                                        long_data$Area_name)))
class(state_tibble) <- c("state", class(state_tibble))

#return both tibbles in a list
return(list(step5func(county_tibble), step6func(state_tibble)))
}
```

```{r}
step456func(long_updated)
```

## Wrapper function

```{r}
my_wrapper <- function(url, values = "Enrollment_Total") {
  result <- read_csv(url) |> 
    step12func() |> 
     step3func() |> 
      step456func()
  return(result)
}
```

## Call It and Combine Your Data

```{r}
#| warning: FALSE
#| message: FALSE
CensusA <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", 
                      values = "Enrollment_Total")
```

```{r}
#| warning: FALSE
#| message: FALSE
CensusB <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", 
                      values = "Enrollment_Total")
```

```{r}
#Combining results of the two wrapper functions
combine_function <- function(data1, data2, values = "Enrollment_Total") {
 county = dplyr::bind_rows(data1[[1]], data2[[1]])
 state = dplyr::bind_rows(data1[[2]], data2[[2]])
 
  return(list(county,state))
}

```

```{r}
combined_data <- combine_function(CensusA,CensusB)
combined_data

```

## Writing a Generic Function for Summarizing

Write a function for state data that plots the mean value of Enrollment over the years for each Division.

```{r}

plot.state <- function(data, var_name = "Enrollment_Total"){
  data |>
    #group by division and year
  group_by(Division, Year) |>
    #get mean enrollment values for the divisions across years
  summarize(mean_enrollment = mean(get(var_name), na.rm = TRUE), .groups = "drop") |> 
    #exclude divisions that are "ERROR"
  filter( Division != "ERROR") |>
  #ggplot where x axis is year and y axis are mean erollments, 
    #distiguish divisions by color
    ggplot(aes(x = Year, y = mean_enrollment, color = Division)) +
    #geom_line to show trend
    geom_line() }

#call the plot for the state dataset in the combined data: 
plot(combined_data[[2]])

```

Write a function to plot county data, users can: specify state (if not specified default is NJ), specify top or bottom counties (top is default), specify how many top or bottom counties to show (default is 5):

```{r}
#plot function for county data
plot.county <- function(data, state = "NJ", type = "top", n = 5, 
                        var_name = "Enrollment_Total") {
  #Filter data for just one state's counties
  data_onestate <- data |> 
    filter(State == state) |> 
  #Get mean enrollment values grouped by area_names
    group_by(Area_name, Year) |> 
    summarize(mean_enrollment = mean(get(var_name), na.rm = TRUE), .groups = "drop")
  
  #Take filtered data and arrange it ascending and descending, use ifelse to specify n rows: 
  
  select_rows <- if (type == "top") { data_onestate |>
      arrange(desc(mean_enrollment)) |>
      slice_head(n = n) } else { data_onestate |>
      arrange((mean_enrollment)) |>
      slice_head(n = n)}

#filter for where the counties names are the same as the top/bottom selected rows    
plot_data <- data_onestate |> 
  filter(Area_name %in% select_rows$Area_name)  
  
#now plot the plot_data with geom_line to show trends over years
ggplot(plot_data, aes(x = Year, y = mean_enrollment, color = Area_name)) +
  geom_line()
   }
  
plot(combined_data[[1]])


```

## Put it Together!

Run your data processing function on the two enrollment URLs given previously:

```{r}
#| warning: FALSE
#| message: FALSE
CensusA <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", 
                      values = "Enrollment_Total")

CensusB <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", 
                      values = "Enrollment_Total")
```

Run your data combining function to put these into one object:

```{r}
combined_data <- combine_function(CensusA,CensusB)
combined_data

#County data: 
combined_data[[1]]

#State data 
combined_data[[2]]
```

Plot State data frame:

```{r}
plot(combined_data[[2]])
```

Plot County data: *specifying the state to be “NC”, the group being the top, the number looked at being 20*

```{r}
plot(combined_data[[1]], state = "NC", type = "top", n = 20)
```

*specifying the state to be “SC”, the group being the bottom, the number looked at being 7*

```{r}
plot(combined_data[[1]], state = "SC", type = "bottom", n = 7)
```

*without specifying anything (defaults used)*

```{r}
plot(combined_data[[1]])
```

*specifying the state to be “PA”, the group being the top, the number looked at being 8*

```{r}
plot(combined_data[[1]], state = "PA", type = "top", n = 8)
```

Run your data processing function on the four data sets:

```{r}
#| warning: FALSE
#| message: FALSE
URL1 <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", 
                   values = "Enrollment_Total")

URL2 <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", 
                   values = "Enrollment_Total")

URL3 <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",
                   values = "Enrollment_Total")

URL4 <- my_wrapper(url = "https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", 
                   values = "Enrollment_Total")
```

Data combining function to put these into one object:

```{r}
combined_data12 <- combine_function(URL1,URL2)
combined_data34 <- combine_function(URL3,URL4)
combined_data1234 <- combine_function(combined_data12,combined_data34)
combined_data1234
```

Use the plot function on the state data frame:

```{r}
plot(combined_data1234[[2]])
```

Use the plot function on the county data frame:

*Specifying the state to be “CA”, the group being the top, the number looked at being 15:*

```{r}
plot(combined_data1234[[1]], state = "CA", type = "top", n = 15)
```

*specifying the state to be “TX”, the group being the top, the number looked at being 4*

```{r}
plot(combined_data1234[[1]], state = "TX", type = "top", n = 4)
```

*without specifying anything (defaults used)*

```{r}
plot(combined_data1234[[1]])
```

*specifying the state to be “NY”, the group being the top, the number looked at being 10*

```{r}
plot(combined_data1234[[1]], state = "NY", type = "top", n = 10)
```
